// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/blacktrue/workflows-enable-inactive/services (interfaces: GithubSrv)

// Package mocks is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/blacktrue/workflows-enable-inactive/models"
	gomock "github.com/golang/mock/gomock"
)

// MockGithubSrv is a mock of GithubSrv interface.
type MockGithubSrv struct {
	ctrl     *gomock.Controller
	recorder *MockGithubSrvMockRecorder
}

// MockGithubSrvMockRecorder is the mock recorder for MockGithubSrv.
type MockGithubSrvMockRecorder struct {
	mock *MockGithubSrv
}

// NewMockGithubSrv creates a new mock instance.
func NewMockGithubSrv(ctrl *gomock.Controller) *MockGithubSrv {
	mock := &MockGithubSrv{ctrl: ctrl}
	mock.recorder = &MockGithubSrvMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockGithubSrv) EXPECT() *MockGithubSrvMockRecorder {
	return m.recorder
}

// EnableWorkflow mocks base method.
func (m *MockGithubSrv) EnableWorkflow(arg0 int32, arg1, arg2 string) (bool, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "EnableWorkflow", arg0, arg1, arg2)
	ret0, _ := ret[0].(bool)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// EnableWorkflow indicates an expected call of EnableWorkflow.
func (mr *MockGithubSrvMockRecorder) EnableWorkflow(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "EnableWorkflow", reflect.TypeOf((*MockGithubSrv)(nil).EnableWorkflow), arg0, arg1, arg2)
}

// GetWorkflows mocks base method.
func (m *MockGithubSrv) GetWorkflows(arg0, arg1 string) ([]models.Workflow, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetWorkflows", arg0, arg1)
	ret0, _ := ret[0].([]models.Workflow)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetWorkflows indicates an expected call of GetWorkflows.
func (mr *MockGithubSrvMockRecorder) GetWorkflows(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetWorkflows", reflect.TypeOf((*MockGithubSrv)(nil).GetWorkflows), arg0, arg1)
}
